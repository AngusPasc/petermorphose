Anleitung zur Erstellung eigener Themes

Themes in Peter Morphose bestehen immer aus 4 Dateien (und fehlt eine dieser vier Dateien, kann es zu seltsamen Fehlern kommen), die alle den selben Dateinamen, aber verschiedene Endungen haben.

Theme.def - Die Definition der Objekteigenschaften, die in jedem Theme anders sein können
Theme.pmt - Die Grafiken des Themes
Theme.pms - Die Sounds des Themes
Theme.mid - Die Musik, die in jedem Level dieses Themas zu hören ist (leider nur eine pro Thema...)



Die .def-Datei

Die Definitionsdateien sind im Format von Windows-INI-Dateien aufgebaut. Hier werden die einzelnen Sektionen näher erläutert.

[ObjName]
ID=Name

Jeder Objektnummer wird hier ein Name zugeteilt. 00 ist zum Beispiel immer der normale Spieler - hier sollte normalerweise immer "Peter" stehen. Die meisten Namen (Effekte vor allem) sieht man zwar fast nie (außer in Log-Fehlermeldungen), angeben sollte man sie der Vollständigkeit halber trotzdem. Die Namen der meisten Objekte sieht man nur im Peter Morphose Editor, einige sind auch im Spiel zu finden ('Ritterpeter!' beim Einsammeln eines Morphers zum Beispiel).

[ObjLife]
ID=X

Hier wird vom Prinzip her die Lebensenergie eines jeden Objekts angegeben. Da diese Eigenschaft nur bei Lebewesen Sinn macht, habe ich sie unsaubererweise bei vielen anderen Objekten für andere Werte missbraucht.

Lebewesen (00 + Gegner): Energiepunkte (ein Treffer nimmt einen weg, bis auf Explosionen), Gegner geben außerdem immer Energie * 3 Punkte beim Töten.

Andere Spieler als 00: Zeit in Frames, die ein Morpher in diesen Typ bringt.

Punkte (26-2B): Punkte, die das Objekt beim Einsammeln gibt.

[ObjRect]
ID=11223344

Die Kollisionsbox der Objekte (siehe Strg+B im Editor). 11 ist der Abstand des linken Boxrands vom Grafikmittelpunkt horizontal, 22 vertikal. 33 und 44 sind die Breite/Höhe der Box minus eins.

[ObjSpeed]
ID=X

Nur einzutragen für Lebewesen. Geschwindigkeit, mit der sich ein Objekt bewegt.

[ObjJump]
IDX=2
IDY=-11

Für jedes Lebewesen zwei Einträge, einen für die horizontale Geschwindigkeit in Blickrichtung und einen für die vertikale Geschwindigkeit beim Sprung (Pixel/Frame).

[Skies]
Num=n
Desc0=Name vom 1. Himmel
Desc1=Name vom 2. Himmel
Desc2=Name vom 3. Himmel
...
Descn-1=Name vom n. Himmel

Hier werden die Namen und die Anzahl der Himmel festgelegt (für die Auswahlliste im Editor).



Die .pmt-Datei

Hier sind alle Daten des Themas abgespeichert. Es handelt sich bei .pmt-Dateien um den Dateityp, der normalerweise mit .dxg gekennzeichnet wird - DelphiX Imagelists. Öffnen/Speichern kann man sie mit einem Editor für dieses Format, unter http://turbo.gamedev.net/delphix.asp gibt es Editoren für .dxg (und .dxw, die .pms-Dateien, siehe unten).

DelphiX Imagelists haben immer ein paar Eigenschaften, die man nicht falsch einstellen sollte. Selbsterklärend ist natürlich die Eigenschaft 'TransparentColor', über den man festlegen kann, welche Farbe im Spiel später transparent wird. Außerdem gibt es immer die wichtigen Eigenschaften PatternWidth/PatternHeight und SkipWidth/SkipHeight. PatternWidth/PatternHeight geben an, wie groß die ganzen Einzelbilder immer sind (muss immer 24/24 sein), SkipHeight und SkipWidth geben an, wieviel Abstand zwischen den Einzelbildern ist (Achtung: in der Tilemap MÜSSEN SkipHeight und SkipWidth immer 0 und 0 sein!). Die Anzahl der Bilder sollte auch immer dieselbe sein (außer bei den Himmel). Generell ist es am einfachsten, wenn man sich nicht mit den Eigenschaften vertraut machen will, einfach ein vorgefertigtes Thema (Ritter) zu verändern. Alle Grafiken bis auf die Tilemap kann man auch ohne Bedenken auf 8 bit runterrechnen, um Speicher zu sparen.



Die .pms-Datei

.pms-Dateien bearbeitet man genau wie .pmt-Dateien mit dem passenden Editor. Die Items so einer DelphiX Wavelist haben weniger Eigenschaften als die einer Imagelist - man kann nur einstellen, wie die Sounds heißen (wichtig für den PMScript-Befehl 'sound' - man kann sogar beliebige eigene Wave-Dateien mitliefern, die im Spiel nicht gebraucht werden aber per sound aufrufbar sind, wenn man Leveleditoren mit seinem Theme verwöhnen will). Außerdem gibt es Eigenschaften, die regulieren, wie oft der Sound maximal gleichzeitig abgespielt werden darf, und eine, die festlegt, ob der Sound geloopt werden soll (immer False).



Die .mid-Datei

Die .mid-Datei muss eine ganz normale, durch das Windows-MCI abspielbare MIDI-Datei sein. Ich kenne leider keinen guten kostenlosen Editor für MIDIs. Rechtlich ungeschützte MIDIs für die Verwendung in eigenen Projekten sollte es im Internet jedenfalls geben.